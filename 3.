kubectl api-versions
kubectl api-resources

Ways to expose services in k8s:
1. NodePort 2. ClusterIP 3. Loadbalancer

# Creating a NodePort Service
#Staring pods
kubectl run --image nginx --port 80 nginx1
kubectl run --image nginx --port 80 nginx2
#Labelling pods
kubectl label pod/nginx1 name=myapp
kubectl label pod/nginx2 name=myapp

#Nodeport Service Manifest. After applying this, We would be able to access nginx pods from node IP on port 32287(by the way netstat/ss does not shows port listening)
apiVersion: v1
kind: Service
metadata:
  name: mynodeportsv
spec:
  type: NodePort
  selector:
    name: myapp
  ports:
    - port: 80
      targetPort: 80
      nodePort: 32287  # Must be in range 30000â€“32767

#kubectl get service. To see the service

#Creating a clusterIp service
kubectl run --image=nginx --port=80 clusterippod
kubectl label pod/clusterippod type=clusterip

kubectl create service clusterip clusteripservice --tcp=80:80
kubectl set selector service/clusteripservice type=clusterip

# Running a pod to confirm connectivity via clusterip service.
kubectl run --stdin --tty --image=ubuntu bashpod -- /bin/bash
apt update -y && apt install curl -y
curl 10.98.119.92

# Creating a loadbalancer service
kubectl create service loadbalancer apnilbservice --tcp=36010:80
kubectl set selector service/apnilbservice type=loadbalancer


#Core DNS
#Getting configuration of CoreDNS
kubectl --namespace kube-system describe configmap/coredns

#DNS requests are handled by coredns pods, which are behind a ClusterIP service
kubectl describe service/kube-dns --namespace kube-system
nslookup google.com

kubectl scale deployment.apps/coredns --replicas=3 --namespace kube-system 

#Liveness, Readiness and Startup Probes


